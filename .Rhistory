pythag(x,y)
pythag(x,z)
pythag <- function(a, b) {
a <- (-abs(2) + 2)
b <- 15
c <- -8
if (a > 0 && b > 0){
c <- sqrt((a^2 + b^2))
return(c)
} else {return("This function only works for positive integers")}
}
pythag(a,b)
pythag(a,c)
data <- c(0.5, 2.5, 1.67, 0.32, 3.49)
round(data, digits= 2)
data <- c(0.5, 2.5, 1.67, 0.32, 3.49)
round(data, digits= 1)
data <- c(0.5, 2.5, 1.67, 0.32, 3.49)
round(data, digits= 0)
#this just takes an array/vector of doubles and round it to the 1 digit
data <- c(0.5, 2.5, 1.67, 0.32, 3.49)
round(data, digits= 1)
#this just takes an array/vector of doubles and round it to the 1 digit
round(data, digits = 0)
number <- 5
if(number %% 2 == 0){
print(number, "is even")
}else{print(number, "is odd")}
number <- 5
if(number %% 2 == 0){
print(number + "is even")
}else{print(number + "is odd")}
number <- 5
if(number %% 2 == 0){
paste(number, "is even")
}else{paste(number, "is odd")}
sum_ofnumbers<- function(a,b){
a <- 6.4
b <- 5.3
result <- round(a + b)
return(result)
}
sum_ofnumbers
sum_ofnumbers<- function(a,b){
a <- 6.4
b <- 5.3
result <- round(a + b)
return(result)
}
result
sum_ofnumbers<- function(a,b){
a <- 6.4
b <- 5.3
result <- round(a + b)
return(result)
}
sum_ofnumbers
sum_ofnumbers<- function(a,b){
result <- round(a + b)
return(result)
}
sum_ofnumbers(6.4, 5.3)
sum_ofnumbers<- function(a,b){
result <- round(a + b)
return(result)
}
sum_ofnumbers(6.1, 5.3)
sum_ofnumbers<- function(a,b){
result <- round(a + b, 0)
return(result)
}
sum_ofnumbers(6.1, 5.3)
sum_ofnumbers<- function(a,b){
result <- round(a + b, 0)
return(result)
}
sum_ofnumbers(6.1, 5.3)
sum_ofnumbers<- function(a,b){
result <- round(a + b, 1)
return(result)
}
sum_ofnumbers(6.1, 5.3)
sum_ofnumbers<- function(a,b){
result <- round(a + b)
return(result)
}
sum_ofnumbers(6.1, 5.3)
sum_ofnumbers<- function(a,b){
result <- round(a + b)
if(result %% 2 == 0){
return(result)
}else{return(ceiling(result))}
}
sum_ofnumbers(6.1, 5.3)
sum_ofnumbers<- function(a,b){
result <- round(a + b)
if(result %% 2 == 0){
return(result)
}else{return(ceiling(result))}
}
sum_ofnumbers(6.1, 5.3)
sum_ofnumbers<- function(a,b){
result <- round(a + b)
if(result %% 2 == 0){
return(result)
}else{
return(ceiling(result))
}
}
sum_ofnumbers(6.1, 5.3)
sum_ofnumbers<- function(a,b){
result <- round(a + b)
if(result %% 2 == 0){
return(result)
}else{
return(floor(result))
}
}
sum_ofnumbers(6.1, 5.3)
sum_ofnumbers<- function(a,b){
result <- round(a + b)
if(result %% 2 == 0){
return(result)
}else{
return(ceiling(result))
}
}
sum_ofnumbers(6.1, 5.3)
sum_ofnumbers<- function(a,b){
result <- round(a + b)
if(result %% 2 == 2){
return(result)
}else{
return(ceiling(result))
}
}
sum_ofnumbers(6.1, 5.3)
sum_ofnumbers<- function(a,b){
result <- round(a + b)
if(result %% 2 == 0){
return(result)
}else{
return(ceiling(result/2)*2, floor(result/2)*2)
}
}
sum_ofnumbers(6.1, 5.3)
sum_ofnumbers<- function(a,b){
result <- round(a + b)
if(result %% 2 == 0){
return(result)
}else{
return(ceiling(result/2)*2)
}
}
sum_ofnumbers(6.1, 5.3)
sum_ofnumbers<- function(a,b){
result <- round(a + b)
if(result %% 2 == 0){
return(result)
}else{
return(ceiling(result/2)*2)
}
}
sum_ofnumbers(6.4, 5.3)
sum_ofnumbers<- function(a,b){
result <- round(a + b)
if(result %% 2 == 0){
return(result)
}else{
return(ceiling(result/2)*2)
}
}
sum_ofnumbers(6.8, 5.3)
sum_ofnumbers<- function(a,b){
result <- round(a + b)
if(result %% 2 == 0){
return(result)
}else{
return(ceiling(result/2)*2)
}
}
sum_ofnumbers(6.9, 5.3)
sum_ofnumbers<- function(a,b){
result <- round(a + b)
if(result %% 2 == 0){
return(result)
}else{
return(ceiling(result/2)*2)
}
}
sum_ofnumbers(6.9, 6.3)
two_args <- function(c, number){
c<- list()
for(number in c){
paste(c[number], c[number+1], c[number-1])
}
}
two_args <- function(c, number){
c<- list()
for(number in c){
paste(c[number], c[number+1], c[number-1])
}
}
two_args(c(2, 4, 5, 7, 6, 9), 4)
two_args <- function(c, number){
c<- list()
for(number in c){
paste(c[number], c[number+1], c[number-1])
}
}
two_args(c(2, 4, 5, 7, 6, 9), 1)
two_args <- function(c, number){
c<- list(number)
for(number in c){
paste(c[number], c[number+1], c[number-1])
}
}
two_args(c(2, 4, 5, 7, 6, 9), 1)
two_args <- function(c, number){
c<- list()
for(number in c){
print(c[number])
}
}
two_args(c(2, 4, 5, 7, 6, 9), 1)
two_args <- function(c, number){
c<- list()
for(number in c){
paste(number, number+1, number-1))
two_args <- function(c, number){
c<- list()
for(number in c){
paste(number, (number+1), (number-1))
}
}
two_args(c(2, 4, 5, 7, 6, 9), 1)
two_args <- function(c, number){
c<- list()
for(number in c){
print(number, (number+1), (number-1))
}
}
two_args(c(2, 4, 5, 7, 6, 9), 1)
two_args <- function(list(), number){
two_args <- function(list(), number){
two_args <- function(c, number){
c<- list()
for(number in 1:length(c){
two_args <- function(c, number){
c<- list()
for(number in 1:length(c)){
paste(c[number], c[number+1], c[number-1])
}
}
two_args(c(2, 4, 5, 7, 6, 9), 1)
two_arguments <- function(c, number){
c<- list()
for(number in 1:length(c)){
paste(c[number], c[number+1], c[number-1])
}
}
two_argumentss(c(2, 4, 5, 7, 6, 9), 1)
two_arguments <- function(c, number){
c<- list()
for(number in 1:length(c)){
paste(c[number], c[number+1], c[number-1])
}
}
two_arguments(c(2, 4, 5, 7, 6, 9), 1)
c<- list()
two_arguments <- function(c, number){
#c<- list()
for(number in 1:length(c)){
paste(c[number], c[number+1], c[number-1])
}
}
two_arguments(c(2, 4, 5, 7, 6, 9), 1)
two_args <- function(c, number){
c<- list()
for(number in 1:length(c)){
paste(c[number], c[number+1], c[number-1])
}
}
new_list <- c(2,3,4,5,6,7,8)
number <- 3
c <- two_args(new_list, number)
print(c)
two_args <- function(c, number){
c<- list()
for(number in 1:length(c)){
paste(c[number], c[number+1], c[number-1])
}
return(c)
}
new_list <- c(2,3,4,5,6,7,8)
number <- 3
c <- two_args(new_list, number)
#print(c)
two_args <- function(input_list, number) {
result <- list()
# Check if the provided number is valid
if (number < 1 || number > length(input_list)) {
return("Invalid number provided")
}
# Loop through the input list to find the items
for (i in (number - 1):(number + 1)) {
if (i >= 1 && i <= length(input_list)) {
result[[length(result) + 1]] <- input_list[i]
} else {
result[[length(result) + 1]] <- NA
}
}
return(result)
}
# Example usage
new_list <- c(2, 3, 4, 5, 6, 7, 8)
number <- 3
c <- two_args(new_list, number)
print(c)
two_args <- function(listinput, number) {
result <- list()
# Check if the provided number is valid
if (number < 1 || number > length(listinput)) {
return("Invalid number provided")
}
# Loop through the input list to find the items
for (i in (number - 1):(number + 1)) {
if (i >= 1 && i <= length(listinput)) {
result[[length(result) + 1]] <- listinput[i]
} else {
result[[length(result) + 1]] <- NA
}
}
return(result)
}
# Example usage
temp_list <- c(2, 3, 4, 5, 6, 7, 8)
number <- 3
c <- two_args(temp_list, number)
print(c)
two_args <- function(listinput, number) {
result <- list()
# Check if the provided number is larger than legth of input or smaller thus, invalid
if (number < 1 || number > length(listinput)) {
return("invalid")
}
# Loop through the input list to find the items
for (i in (number - 1):(number + 1)) {
if (i >= 1 && i <= length(listinput)) {
result[[length(result) + 1]] <- listinput[i]
} else {
result[[length(result) + 1]] <- NA
}
}
return(result)
}
# Example usage
temp_list <- c(2, 3, 4, 5, 6, 7, 8)
number <- 3
c <- two_args(temp_list, number)
print(c)
two_args <- function(listinput, number) {
result <- list()
# Check if the provided number is larger than legth of input or smaller thus, invalid
if (number < 1 || number > length(listinput)) {
return("invalid")
}
# Loop through the input list to find the items
for (i in (number - 1):(number + 1)) {
if (i >= 1 && i <= length(listinput)) {
result[[length(result) + 1]] <- listinput[i]
} else {
result[[length(result) + 1]] <- NA
}
}
return(result)
}
temp_list <- c(2, 3, 4, 5, 6, 7, 8)
number <- 3
c <- two_args(temp_list, number)
print(c)
two_args <- function(listinput, number) {
result <- list()
# Check if the provided number is larger than legth of input or smaller thus, invalid
if (number < 1 || number > length(listinput)) {
return("invalid")
}
# Loop through the input list to find the items
for (i in (number - 1):(number + 1)) {
if (i >= 1 && i <= length(listinput)) {
result[[length(result) + 1]] <- listinput[i]
} else {
result[[length(result) + 1]] <- NA
}
}
return(result)
}
temp_list <- result(2, 3, 4, 5, 6, 7, 8)
two_args <- function(listinput, number) {
result <- list()
# Check if the provided number is larger than legth of input or smaller thus, invalid
if (number < 1 || number > length(listinput)) {
return("invalid")
}
# Loop through the input list to find the items
for (i in (number - 1):(number + 1)) {
if (i >= 1 && i <= length(listinput)) {
result[[length(result) + 1]] <- listinput[i]
} else {
result[[length(result) + 1]] <- NA
}
}
return(result)
}
temp_list <- listinput(2, 3, 4, 5, 6, 7, 8)
two_args <- function(listinput, number) {
result <- list()
# Check if the provided number is larger than legth of input or smaller thus, invalid
if (number < 1 || number > length(listinput)) {
return("invalid")
}
# Loop through the input list to find the items
for (i in (number - 1):(number + 1)) {
if (i >= 1 && i <= length(listinput)) {
result[[length(result) + 1]] <- listinput[i]
} else {
result[[length(result) + 1]] <- NA
}
}
return(result)
}
temp_list <- c(2, 3, 4, 5, 6, 7, 8)
number <- 3
c <- two_args(temp_list, number)
print(c)
two_args <- function(listinput, number) {
result <- list()
# Check if the provided number is larger than legth of input or smaller thus, invalid
if (number < 1 || number > length(listinput)) {
return("invalid")
}
# Loop through the input list to find the items
for (i in (number - 1):(number + 1)) {
if (i >= 1 && i <= length(listinput)) {
result[[length(result) + 1]] <- listinput[i]
} else {
result[[length(result) + 1]] <- NA
}
}
return(result)
}
temp_list <- x(2, 3, 4, 5, 6, 7, 8)
two_args <- function(listinput, number) {
result <- list()
# Check if the provided number is larger than legth of input or smaller thus, invalid
if (number < 1 || number > length(listinput)) {
return("invalid")
}
# Loop through the input list to find the items
for (i in (number - 1):(number + 1)) {
if (i >= 1 && i <= length(listinput)) {
result[[length(result) + 1]] <- listinput[i]
} else {
result[[length(result) + 1]] <- NA
}
}
return(result)
}
temp_list <- c(2, 3, 4, 5, 6, 7, 8)
number <- 3
c <- two_args(temp_list, number)
print(c)
two_args <- function(listinput, number) {
result <- list()
# Check if the provided number is larger than legth of input or smaller thus, invalid
if (number < 1 || number > length(listinput)) {
return("invalid")
}
# Loop through the input list to find the items
for (i in (number - 1):(number + 1)) {
if (i >= 1 && i <= length(listinput)) {
result[[length(result) + 1]] <- listinput[i]
} else {
result[[length(result) + 1]] <- NA
}
}
return(result)
}
temp_list <- c(2, 3, 4, 5, 6, 7, 8)
number <- 3
c <- two_args(temp_list, number)
print(c)
two_args <- function(listinput, number) {
result <- list()
# Check if the provided number is larger than legth of input or smaller thus, invalid
if (number < 1 || number > length(listinput)) {
return("invalid")
}
# Loop through the input list to find the items
for (i in (number - 1):(number + 1)) {
if (i >= 1 && i <= length(listinput)) {
result[[length(result) + 1]] <- listinput[i]
} else {
result[[length(result) + 1]] <- NA
}
}
return(result)
}
temp_list <- c(2, 3, 4, 5, 6, 7, 8)
number <- 4
c <- two_args(temp_list, number)
print(c)
