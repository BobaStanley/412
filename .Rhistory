new_list <- c(2, 3, 4, 5, 6, 7, 8)
number <- 3
c <- two_args(new_list, number)
print(c)
two_args <- function(listinput, number) {
result <- list()
# Check if the provided number is valid
if (number < 1 || number > length(listinput)) {
return("Invalid number provided")
}
# Loop through the input list to find the items
for (i in (number - 1):(number + 1)) {
if (i >= 1 && i <= length(listinput)) {
result[[length(result) + 1]] <- listinput[i]
} else {
result[[length(result) + 1]] <- NA
}
}
return(result)
}
# Example usage
temp_list <- c(2, 3, 4, 5, 6, 7, 8)
number <- 3
c <- two_args(temp_list, number)
print(c)
two_args <- function(listinput, number) {
result <- list()
# Check if the provided number is larger than legth of input or smaller thus, invalid
if (number < 1 || number > length(listinput)) {
return("invalid")
}
# Loop through the input list to find the items
for (i in (number - 1):(number + 1)) {
if (i >= 1 && i <= length(listinput)) {
result[[length(result) + 1]] <- listinput[i]
} else {
result[[length(result) + 1]] <- NA
}
}
return(result)
}
# Example usage
temp_list <- c(2, 3, 4, 5, 6, 7, 8)
number <- 3
c <- two_args(temp_list, number)
print(c)
two_args <- function(listinput, number) {
result <- list()
# Check if the provided number is larger than legth of input or smaller thus, invalid
if (number < 1 || number > length(listinput)) {
return("invalid")
}
# Loop through the input list to find the items
for (i in (number - 1):(number + 1)) {
if (i >= 1 && i <= length(listinput)) {
result[[length(result) + 1]] <- listinput[i]
} else {
result[[length(result) + 1]] <- NA
}
}
return(result)
}
temp_list <- c(2, 3, 4, 5, 6, 7, 8)
number <- 3
c <- two_args(temp_list, number)
print(c)
two_args <- function(listinput, number) {
result <- list()
# Check if the provided number is larger than legth of input or smaller thus, invalid
if (number < 1 || number > length(listinput)) {
return("invalid")
}
# Loop through the input list to find the items
for (i in (number - 1):(number + 1)) {
if (i >= 1 && i <= length(listinput)) {
result[[length(result) + 1]] <- listinput[i]
} else {
result[[length(result) + 1]] <- NA
}
}
return(result)
}
temp_list <- result(2, 3, 4, 5, 6, 7, 8)
two_args <- function(listinput, number) {
result <- list()
# Check if the provided number is larger than legth of input or smaller thus, invalid
if (number < 1 || number > length(listinput)) {
return("invalid")
}
# Loop through the input list to find the items
for (i in (number - 1):(number + 1)) {
if (i >= 1 && i <= length(listinput)) {
result[[length(result) + 1]] <- listinput[i]
} else {
result[[length(result) + 1]] <- NA
}
}
return(result)
}
temp_list <- listinput(2, 3, 4, 5, 6, 7, 8)
two_args <- function(listinput, number) {
result <- list()
# Check if the provided number is larger than legth of input or smaller thus, invalid
if (number < 1 || number > length(listinput)) {
return("invalid")
}
# Loop through the input list to find the items
for (i in (number - 1):(number + 1)) {
if (i >= 1 && i <= length(listinput)) {
result[[length(result) + 1]] <- listinput[i]
} else {
result[[length(result) + 1]] <- NA
}
}
return(result)
}
temp_list <- c(2, 3, 4, 5, 6, 7, 8)
number <- 3
c <- two_args(temp_list, number)
print(c)
two_args <- function(listinput, number) {
result <- list()
# Check if the provided number is larger than legth of input or smaller thus, invalid
if (number < 1 || number > length(listinput)) {
return("invalid")
}
# Loop through the input list to find the items
for (i in (number - 1):(number + 1)) {
if (i >= 1 && i <= length(listinput)) {
result[[length(result) + 1]] <- listinput[i]
} else {
result[[length(result) + 1]] <- NA
}
}
return(result)
}
temp_list <- x(2, 3, 4, 5, 6, 7, 8)
two_args <- function(listinput, number) {
result <- list()
# Check if the provided number is larger than legth of input or smaller thus, invalid
if (number < 1 || number > length(listinput)) {
return("invalid")
}
# Loop through the input list to find the items
for (i in (number - 1):(number + 1)) {
if (i >= 1 && i <= length(listinput)) {
result[[length(result) + 1]] <- listinput[i]
} else {
result[[length(result) + 1]] <- NA
}
}
return(result)
}
temp_list <- c(2, 3, 4, 5, 6, 7, 8)
number <- 3
c <- two_args(temp_list, number)
print(c)
two_args <- function(listinput, number) {
result <- list()
# Check if the provided number is larger than legth of input or smaller thus, invalid
if (number < 1 || number > length(listinput)) {
return("invalid")
}
# Loop through the input list to find the items
for (i in (number - 1):(number + 1)) {
if (i >= 1 && i <= length(listinput)) {
result[[length(result) + 1]] <- listinput[i]
} else {
result[[length(result) + 1]] <- NA
}
}
return(result)
}
temp_list <- c(2, 3, 4, 5, 6, 7, 8)
number <- 3
c <- two_args(temp_list, number)
print(c)
two_args <- function(listinput, number) {
result <- list()
# Check if the provided number is larger than legth of input or smaller thus, invalid
if (number < 1 || number > length(listinput)) {
return("invalid")
}
# Loop through the input list to find the items
for (i in (number - 1):(number + 1)) {
if (i >= 1 && i <= length(listinput)) {
result[[length(result) + 1]] <- listinput[i]
} else {
result[[length(result) + 1]] <- NA
}
}
return(result)
}
temp_list <- c(2, 3, 4, 5, 6, 7, 8)
number <- 4
c <- two_args(temp_list, number)
print(c)
install.packages("tidyverse")
my_numbers <- c(1,2,3,4,5,8,9,10)
mean(my_numbers)
library(tidyverse)
glimpse(ChickWeight)
ChickWeight %>%
select(age_days= Time, weight_ca= weight) %>%
head( n = 3)
chick_class <- ChickWeight %>%
select(chick_id = Chick, diet = Diet, age_days = Time, weight_ca = Weight)
chick_class <- ChickWeight %>%
select(chick_id = Chick, diet = Diet, age_days = Time, weight_ca = weight)
View(chick_class)
chick_class %>%
arrange(chick_id) %>%
head()
chick_clean %>%
mutate(session = case_when(age_days = 0 ~ "birth", age_days = 20 ~ "last1", age_days = 21 ~"last2", TRUE    ~ as.character(age_days)))
chick_clean%>%
mutate(session = case_when(age_days = 0 ~ "birth", age_days = 20 ~ "last1", age_days = 21 ~"last2", TRUE    ~ as.character(age_days)))
Chick_clean%>%
mutate(session = case_when(age_days = 0 ~ "birth", age_days = 20 ~ "last1", age_days = 21 ~"last2", TRUE    ~ as.character(age_days)))
chick_clean%>%
mutate(session = case_when(age_days = 0 ~ "birth", age_days = 20 ~ "last1", age_days = 21 ~"last2", TRUE    ~ as.character(age_days)))
View(chick_class)
glimpse(chick_clean)
chick_class%>%
mutate(session = case_when(age_days = 0 ~ "birth", age_days = 20 ~ "last1", age_days = 21 ~"last2", TRUE    ~ as.character(age_days)))
chick_class %>%
mutate(weight_lbs = weight_gm/453.6) %>%
group_by(diet)%>%
summarise(n_obs = n(), mean_wgt_gm = mean(weight_gm))
chick_class %>%
mutate(session = case_when(age_days = 0 ~ "birth", age_days = 20 ~ "last1", age_days = 21 ~"last2", TRUE    ~ as.character(age_days)))
chick_class %>%
mutate(new_column = "value") %>%
head(n = 3)
chick_class <- ChickWeight %>%
select(chick_id = Chick, diet = Diet, age_days = Time, weight_ca = weight)
library(tidyverse)
glimpse(ChickWeight)
ChickWeight %>%
select(age_days= Time, weight_ca= weight) %>%  #%>%--just means "and then"
head( n = 3)
chick_class <- ChickWeight %>%
select(chick_id = Chick, diet = Diet, age_days = Time, weight_ca = weight)
chick_class %>%
arrange(chick_id) %>%
head()
chick_class %>%
mutate(new_column = "value") %>%
head(n = 3)
chick_class %>%
mutate(session = case_when(age_days = 0 ~ "birth", age_days = 20 ~ "last1", age_days = 21 ~"last2", TRUE    ~ as.character(age_days)))
chick_class %>%
mutate(weight_lbs = weight_gm/453.6) %>%
group_by(diet)%>%
summarise(n_obs = n(), mean_wgt_gm = mean(weight_gm))
chick_clean %>%
mutate(weight_per_day = weight_gm/age_days) %>%
head(n = 3)
chick_class %>%
mutate(weight_per_day = weight_gm/age_days) %>%
head(n = 3)
glimpse(ChickWeight)
ChickWeight %>%
select(age_days= Time, weight_gm= weight) %>%  #%>%--just means "and then"
head( n = 3)
chick_class <- ChickWeight %>%
select(chick_id = Chick, diet = Diet, age_days = Time, weight_gm = weight)
chick_class %>%
arrange(chick_id) %>%
head()
chick_class %>%
mutate(new_column = "value") %>%
head(n = 3)
chick_class %>%
mutate(weight_per_day = weight_gm/age_days) %>%
head(n = 3)
chick_class %>%
mutate(session = case_when(age_days = 0 ~ "birth", age_days = 20 ~ "last1", age_days = 21 ~"last2", TRUE    ~ as.character(age_days)))
chick_class %>%
mutate(weight_lbs = weight_gm/453.6) %>%
group_by(diet)%>%
summarise(n_obs = n(), mean_wgt_gm = mean(weight_gm))
chick_class %>%
mutate(session = case_when(age_days == 0 ~ "birth",
age_days == 20 ~ "last1",
age_days == 21 ~ "last2",
TRUE           ~ as.character(age_days)))
?pivot_longer
billboard %>%
pivot_longer(cols= starts_with("wk"), names_to = "week", values_to = "rank", names_transform = list(week = parse_number))
billboard %>%
separate(col =date.entered, into= c("year", "month", "day"), sep = "")
billboard %>%
separate(col =date.entered, into= c("year", "month", "day"), sep = "-")
billboard %>%
separate(col =date.entered, into= c("year", NA, NA), sep = "-")
?fish_encounters
library(tidyverse)
?fish_encounters
fish_encounters
fish_encounters %>%
group_by(seen) %>%
count()
fish_encounters %>%
complete(fish, station)
fish_encounters %>%
group_by(station) %>%
count()
fish_complete <- fish_encounters %>%
complete(fish, station)
fish_complete %>%
group_by(station) %>%
count()
fish_encounters %>%
complete(fish, station, fill = list(seen = 0)) %>%
group_by(seen) %>%
count()
fish_encounters %>%
complete(fish, station) %>%
replace_na(list(seen=0))
library(tidyverse)
word_tibble <- tibble(x= 1:3, y= 3. z = x*2 + y)
word_tibble <- tibble(x= 1:3, y= 3. z = x*2 + y)
word_tibble <- tibble(x= 1:3, y= 3, z = x*2 + y)
View(my_list)
#don't use binding when combining data
age_data<- tribble(-id, -age,
1,8,
2,10,
3,8,
5,9)
gender_data <- tribble(- id, - gender,
1, "f",
2, "m",
3, "mb",
4, "y")
age_data
gender_data
?tribble
?tibble
?tibble
?tribble
#don't use binding when combining data
age_data<- tribble(~id, ~age,
1,8,
2,10,
3,8,
5,9)
gender_data <- tribble(~ id, ~ gender,
1, "f",
2, "m",
3, "mb",
4, "y")
full_join(age_data, gender_data)
library(tidyverse)
?str_detect
?lubridate
today()
now()
list_of_dates <- c("11-Jan-2017")
mdy(list_of_dates)
list_of_dates <- c("March 31st, 2017", "Janary list, 2017" ,"11-Jan-2017")
mdy(list_of_dates)
list_of_dates <- c("March 31st, 2017", "Janary list, 2017" ,"31-Jan-2017")
mdy(list_of_dates)
today() - mdy(Oct 10 2021)
today() - mdy("Oct 10 2021")
factor(months)
#when using a summarise() function, the input is a tibble, even if there's only one cell
ChickWeight %>%
summarise(mean_weight ~ mean(weight))
#when using a summarise() function, the input is a tibble, even if there's only one cell
ChickWeight %>%
summarise(mean_weight = mean(weight))
#when using a summarise() function, the input is a tibble, even if there's only one cell
ChickWeight %>%
summarise(mean_weight = mean(weight)) %>%
pull()
ChickWeight %>%
select(weight) %>%
pull()
library(tidyverse)
library(dplyr)
data("ufc_stats")
data("ufc_stats")
ufc_stats %>% group_by(fighter) %>%
summarise(total_significant_strikes = sum(significant_strikes_landed)) %>%
arrange(-total_significant_strikes) %>%
head()
install_github("mtoto/ufc.stats")
data("ufc_stats")
data("ufc_stats")
data("ufc_stats")
data("ufc_stats")
library(dplyr)
data("ufc_stats")
load("C:/Users/stanl/OneDrive/Documents/GitHub/412/FinalProject/ufc_stats.rda")
View(ufc_stats)
data("ufc_stats")
ufc_stats %>% group_by(fighter) %>%
summarise(total_significant_strikes = sum(significant_strikes_landed)) %>%
arrange(-total_significant_strikes) %>%
head()
data("ufc_stats")
library(tidyverse)
ChickWeight %>%
ggplot()
?ggplot
first_data_ raw <- read_csv("FracCardGame_FullDataSet.csv")
first_data_raw <- read_csv("FracCardGame_FullDataSet.csv")
glimpse(first_data_raw)
first_data_raw <- frac_data_raw %>%
filter(TestType == "Map" & Session == "post" & IncludePostTest == 1) %>%
select(SubID, Condition, Month_Year_tested, AgeSessional_months, CHildGrade, Fraction, Accuracy)
first_data_raw <- frac_data_raw %>%
filter(TestType == "Map" & Session == "post" & IncludePostTest == 1) %>%
select(SubID, Condition, Month_Year_tested, AgeSession1_months, ChildGrade, Fraction, Accuracy)
first_data_raw <- frac_data_raw %>%
filter(TestType == "Map" & Session == "post" & IncludePostTest == 1) %>%
select(SubID, Condition, Month_Year_tested, AgeSession1_months, ChildGrade, Fraction, Accuracy)
first_data_raw <- frac_data_raw %>%
filter(TestType == "Map" & Session == "post" & IncludePostTest == 1) %>%
select(SubID, Condition, Month_Year_tested, AgeSession1_months, ChildGrade, Fraction, Accuracy)
first_data_raw <- first_data_raw %>%
filter(TestType == "Map" & Session == "post" & IncludePostTest == 1) %>%
select(SubID, Condition, Month_Year_tested, AgeSession1_months, ChildGrade, Fraction, Accuracy)
first_data_raw <- first_data_raw %>%
filter(TaskType == "Map" & Session == "post" & IncludePostTest == 1) %>%
select(SubID, Condition, Month_Year_tested, AgeSession1_months, ChildGrade, Fraction, Accuracy)
glimpse(first_data_raw)
first_propcorr_post <- first_data_raw %>%
group_by(SubID, Condition) %>%
summarise(prop_corr = sum(Accuracy/a()))
first_propcorr_post <- first_data_raw %>%
group_by(SubID, Condition) %>%
summarise(prop_corr = sum(Accuracy/a())
first_propcorr_post <- first_data_raw %>%
group_by(SubID, Condition) %>%
summarise(prop_corr = sum(Accuracy)/a())
first_propcorr_post <- first_data_raw %>%
group_by(SubID, Condition) %>%
summarise(prop_corr = sum(Accuracy)/a()
first_propcorr_post <- first_data_raw %>%
group_by(SubID, Condition) %>%
summarise(prop_corr = sum(Accuracy)/a())
first_propcorr_post %>%
group_by(Condition) %>%
summarise(mean_prop_corr = mean(prop_corr))
first_propcorr_post %>%
ggplot(ses(y = prop_corr, x = Condition)) +
stat_summary(geom ="point", fun = 'mean')
first_data_raw %>%
ggplot(ses(y = prop_corr, x = Condition)) +
stat_summary(geom ="point", fun = 'mean')
library(tidyverse)
frac_data_raw <- read_csv("FracCardGame_FullDataSet.csv")
glimpse(frac_data_raw)
frac_data_post %>%
distinct(SubID, AgeSession1_months) %>% # to isolate to one row per child, maintaining the Age variable
ggplot(aes(x = AgeSession1_months)) +
geom_histogram(binwidth = 1) +
labs(title = "Distribution of Age (in Months)")
frac_data_post <- frac_data_raw %>%
filter(TaskType == "Map" & Session == "post" & IncludePostTest == 1) %>% # just looking at post-test scores for the Mapping task
select(SubID, Condition, Month_Year_tested, AgeSession1_months, ChildGrade, Fraction, Accuracy) # want to isolate just the columns we care about
glimpse(frac_data_post)
frac_data_post %>%
distinct(SubID, AgeSession1_months) %>% # to isolate to one row per child, maintaining the Age variable
ggplot(aes(x = AgeSession1_months)) +
geom_histogram(binwidth = 1) +
labs(title = "Distribution of Age (in Months)")
frac_propcorr_post <- frac_data_post %>%
group_by(SubID, Condition) %>% # for each person, and maintaining information about their condition
summarise(prop_corr = sum(Accuracy)/n())  # calculate the proportion of trials they got correct. Number correct / total number of rows (i.e., trials)
frac_propcorr_post %>%
group_by(Condition) %>%
summarise(mean_prop_corr = mean(prop_corr))  # get the summarized data for each condition
frac_propcorr_post %>%
group_by(Condition) %>%
summarise(mean_prop_corr = mean(prop_corr))  %>% # get the summarized data for each condition
ggplot(aes(y = mean_prop_corr, x = Condition)) +  # then plot it
geom_point()
frac_propcorr_post %>%
ggplot(aes(y = prop_corr, x = Condition)) +  # pass the dataset to ggplot, but then use stat_summary to calculate the mean within ggplot:
stat_summary(geom = "point", # we tell it which geom to use, within the stat_summary function (but remove the geom_ bit of the name)
fun = "mean" # tell it which function to use (there are different function parameters depending on what you're trying to plot)
)
library(tidyverse)
frac_propcorr_post %>%
ggplot(aes(y = prop_corr, x = Condition)) +  # pass the dataset to ggplot, but then use stat_summary to calculate the mean within ggplot:
stat_summary(geom = "point", # we tell it which geom to use, within the stat_summary function (but remove the geom_ bit of the name)
fun = "mean" # tell it which function to use (there are different function parameters depending on what you're trying to plot)
)
ylim(0,1)
frac_propcorr_post %>%
ggplot(aes(y = prop_corr, x = Condition)) +  # pass the dataset to ggplot, but then use stat_summary to calculate the mean within ggplot:
stat_summary(geom = "point", # we tell it which geom to use, within the stat_summary function (but remove the geom_ bit of the name)
fun = "mean" # tell it which function to use (there are different function parameters depending on what you're trying to plot)
)
ylim(0,1) +
labs(y = "Proportion Correct", x= "Card Game Condition", title = "Average proportion correct on mapping task")
frac_propcorr_post %>%
ggplot(aes(y = prop_corr, x = Condition)) +  # pass the dataset to ggplot, but then use stat_summary to calculate the mean within ggplot:
stat_summary(geom = "point", # we tell it which geom to use, within the stat_summary function (but remove the geom_ bit of the name)
fun = "mean" # tell it which function to use (there are different function parameters depending on what you're trying to plot)
)+
ylim(0,1) +
labs(y = "Proportion Correct", x= "Card Game Condition", title = "Average proportion correct on mapping task")
View(ufc_stats)
load(ufc_stats)
ufc_stats
View(ufc_stats)
