group_by(fighter, fight_date) %>%
summarise(
total_wins = sum(winner == "W"),
total_losses = sum(winner == "L"),
total_fights = n_distinct(id)  # Counting distinct fights based on id
) %>%
group_by(fighter) %>%
summarise(
win_loss_ratio = total_wins / (total_wins + total_losses),
avg_opponent_wins = ifelse(total_fights > 1, mean(na.omit(head(total_wins, -1))), 0),
total_fights = sum(total_fights)  # Summing total_fights to account for repeated dates
)
ranked_fighters <- ufc_stats_filtered %>%
arrange(desc(win_loss_ratio), desc(avg_opponent_wins))
# Print the ranked list of fighters
print(ranked_fighters)
View(ufc_stats)
ufc_stats
View(ranked_fighters)
View(ufc_stats)
View(ufc_stats)
ufc_stats_filtered <- ufc_stats %>%
group_by(fighter, fight_date) %>%
summarise(
total_wins = sum(winner == "W"),
total_losses = sum(winner == "L"),
total_fights = n_distinct(id)  # Counting distinct fights based on id
) %>%
group_by(fighter) %>%
summarise(
total_fights = sum(total_fights)  # Summing total_fights to account for repeated dates
) %>%
filter(total_fights >= 10)  # Filter for fighters with at least 10 fights
ufc_stats_filtered <- ufc_stats_filtered %>%
group_by(fighter) %>%
summarise(
win_loss_ratio = sum(winner == "W") / total_fights,
avg_opponent_wins = ifelse(total_fights > 1, mean(na.omit(lead(total_wins, default = 0))), 0)
)
View(ufc_stats_filtered)
ufc_stats_filtered <- ufc_stats %>%
group_by(fighter, fight_date) %>%
summarise(
total_wins = sum(winner == "W"),
total_losses = sum(winner == "L"),
total_fights = n_distinct(id)  # Counting distinct fights based on id
) %>%
group_by(fighter) %>%
summarise(
total_fights = sum(total_fights)  # Summing total_fights to account for repeated dates
) %>%
filter(total_fights >= 10)  # Filter for fighters with at least 10 fights
ufc_stats_filtered <- ufc_stats_filtered %>%
group_by(fighter) %>%
summarise(
win_loss_ratio = sum(winner == "W") / total_fights,
avg_opponent_wins = ifelse(total_fights > 1, mean(na.omit(lead(total_wins, default = 0))), 0)
)
ufc_stats_filtered <- ufc_stats %>%
group_by(fighter, fight_date) %>%
summarise(
total_wins = sum(result == "win"),
total_losses = sum(result == "loss"),
total_fights = n_distinct(id)
) %>%
group_by(fighter) %>%
summarise(
total_fights = sum(total_fights)
) %>%
filter(total_fights >= 10)
ufc_stats_filtered <- ufc_stats_filtered %>%
group_by(fighter) %>%
summarise(
win_loss_ratio = sum(result == "win") / total_fights,
avg_opponent_wins = ifelse(total_fights > 1, mean(na.omit(lead(total_wins, default = 0))), 0)
)
View(ufc_stats_filtered)
ufc_stats_filtered <- ufc_stats %>%
group_by(fighter, fight_date) %>%
summarise(
total_wins = sum(winner == "W"),
total_losses = sum(winner == "L"),
total_fights = n_distinct(id)  # Counting distinct fights based on id
) %>%
group_by(fighter) %>%
summarise(
total_fights = sum(total_fights)  # Summing total_fights to account for repeated dates
) %>%
filter(total_fights >= 10)  # Filter for fighters with at least 10 fights
ufc_stats_filtered <- ufc_stats_filtered %>%
group_by(fighter) %>%
summarise(
win_loss_ratio = sum(winner == "W") / total_fights,
avg_opponent_wins = ifelse(total_fights > 1, mean(na.omit(lead(total_wins, default = 0))), 0)
)
ufc_stats_filtered <- ufc_stats %>%
group_by(fighter, fight_date) %>%
summarise(
total_wins = sum(winner == "W"),
total_losses = sum(winner == "L"),
total_fights = n_distinct(id)  # Counting distinct fights based on id
) %>%
group_by(fighter) %>%
summarise(
win_loss_ratio = total_wins / (total_wins + total_losses),
avg_opponent_wins = ifelse(total_fights > 1, mean(na.omit(head(total_wins, -1))), 0),
total_fights = sum(total_fights)  # Summing total_fights to account for repeated dates
)
ranked_fighters <- ufc_stats_filtered %>%
arrange(desc(win_loss_ratio), desc(avg_opponent_wins))
# Print the ranked list of fighters
print(ranked_fighters)
View(ufc_stats_filtered)
ufc_stats_filtered <- ufc_stats %>%
group_by(fighter, fight_date) %>%
summarise(
total_wins = sum(winner == "W"),
total_losses = sum(winner == "L"),
total_fights = n_distinct(id)  # Counting distinct fights based on id
) %>%
group_by(fighter) %>%
summarise(
win_loss_ratio = total_wins / (total_wins + total_losses),
avg_opponent_wins = ifelse(total_fights > 1, mean(na.omit(head(total_wins, -1))), 0),
total_fights = sum(total_fights)  # Summing total_fights to account for repeated dates
) %>%
filter(total_fights >= 15)  # Filter for fighters with at least 15 fights
ranked_fighters <- ufc_stats_filtered %>%
arrange(desc(win_loss_ratio), desc(avg_opponent_wins))
# Print the ranked list of fighters
print(ranked_fighters)
View(ufc_stats_filtered)
ufc_stats_filtered <- ufc_stats %>%
group_by(fighter, fight_date) %>%
summarise(
total_wins = sum(winner == "W"),
total_losses = sum(winner == "L"),
total_fights = n_distinct(id)
) %>%
group_by(fighter) %>%
summarise(
win_loss_ratio = total_wins / (total_wins + total_losses),
avg_opponent_wins = ifelse(total_fights > 1, mean(na.omit(total_wins)), 0),
total_fights = sum(total_fights)
) %>%
filter(total_fights >= 15)
ranked_fighters <- ufc_stats_filtered %>%
arrange(desc(win_loss_ratio), desc(avg_opponent_wins))
# Print the ranked list of fighters
print(ranked_fighters)
ufc_stats_filtered <- ufc_stats %>%
group_by(fighter, fight_date) %>%
summarise(
total_wins = sum(winner == "W"),
total_losses = sum(winner == "L"),
total_fights = n_distinct(id)
) %>%
group_by(fighter) %>%
summarise(
win_loss_ratio = total_wins / (total_wins + total_losses),
avg_opponent_wins = ifelse(total_fights > 1, mean(na.omit(total_wins)), 0),
total_fights = sum(total_fights)
) %>%
filter(total_fights >= 15)
ranked_fighters <- ufc_stats_filtered %>%
arrange(desc(win_loss_ratio), desc(avg_opponent_wins))
# Print the ranked list of fighters
print(ranked_fighters)
ufc_stats_filtered <- ufc_stats %>%
group_by(fighter) %>%
summarise(
total_wins = sum(winner == "W"),
total_losses = sum(winner == "L"),
total_fights = n_distinct(id)
) %>%
filter(total_fights >= 15)  # Adjust the minimum number of fights as needed
ufc_stats_filtered <- ufc_stats_filtered %>%
mutate(win_loss_ratio = total_wins / (total_wins + total_losses))
goat_filtered <- ufc_stats_filtered %>%
arrange(desc(win_loss_ratio), desc(total_wins)) %>%
head(1)
# Print the fighter with the best overall record
print(goat_filtered)
load("C:/Users/stanl/OneDrive/Documents/GitHub/412/FinalProject/ufc_stats.rda")
View(ufc_stats)
ufc_stats
ufc_stats %>% group_by(fighter) %>%
summarise(total_significant_strikes = sum(significant_strikes_landed)) %>%
arrange(-total_significant_strikes) %>%
head()
ufc_stats %>%
group_by(fighter) %>%
summarise(knockdown_rate = sum(knockdowns) / sum(significant_strikes_attempted)) %>%
arrange(desc(knockdown_rate)) %>%
head()
ufc_stats %>%
group_by(fighter) %>%
summarise(striking_efficiency = sum(significant_strikes_landed) / sum(significant_strikes_attempted)) %>%
arrange(desc(striking_efficiency)) %>%
head()
ufc_stats %>%
group_by(fighter) %>%
summarise(grappling_efficiency = sum(takedown_successful) / sum(takedown_attempted)) %>%
arrange(desc(grappling_efficiency)) %>%
head()
ufc_stats %>%
group_by(fighter) %>%
summarise(entertainment_score =
(knockdowns + significant_strikes_landed - significant_strikes_attempted + submission_attempt) / 4) %>%
arrange(desc(entertainment_score)) %>%
head()
ufc_stats %>%
group_by(fighter) %>%
summarise(ppv_impact_score =
(knockdowns + significant_strikes_landed + takedown_successful + (1 - takedown_rate) * 10) / 4 +
sum(attendance) / 1000) %>%
arrange(desc(ppv_impact_score)) %>%
head()
ufc_stats <- ufc_stats %>%
mutate(ppv_revenue_per_fight = (attendance * 59.99) / n())
best_ppv_seller_per_fight <- ufc_stats %>%
group_by(fighter) %>%
summarise(avg_ppv_revenue_per_fight = mean(ppv_revenue_per_fight)) %>%
arrange(desc(avg_ppv_revenue_per_fight))
# Print the top fighter
print(best_ppv_seller_per_fight$fighter[1])
ufc_stats_filtered <- ufc_stats %>%
group_by(fighter) %>%
summarise(
total_wins = sum(winner == "W"),
total_losses = sum(winner == "L"),
total_fights = n_distinct(id)
) %>%
filter(total_fights >= 5)  # Adjust the minimum number of fights as needed
ufc_stats_filtered <- ufc_stats_filtered %>%
mutate(win_loss_ratio = total_wins / (total_wins + total_losses))
goat_filtered <- ufc_stats_filtered %>%
arrange(desc(win_loss_ratio), desc(total_wins)) %>%
head(1)
# Print the fighter with the best overall record
print(goat_filtered)
ufc_stats <- ufc_stats %>%
mutate(ppv_revenue = attendance * 59.99)
best_ppv_seller <- ufc_stats %>%
group_by(fighter) %>%
summarise(total_ppv_revenue = sum(ppv_revenue)) %>%
arrange(desc(total_ppv_revenue)) %>%
head(1)
# Print the fighter with the highest total PPV revenue
print(best_ppv_seller)
ufc_stats_filtered <- ufc_stats %>%
group_by(fighter, fight_date) %>%
summarise(
total_wins = sum(winner == "W"),
total_losses = sum(winner == "L"),
total_fights = n_distinct(id)
) %>%
group_by(fighter) %>%
summarise(
win_loss_ratio = total_wins / (total_wins + total_losses),
avg_opponent_wins = ifelse(total_fights > 1, mean(na.omit(total_wins)), 0),
total_fights = sum(total_fights)
) %>%
filter(total_fights >= 15)
ranked_fighters <- ufc_stats_filtered %>%
arrange(desc(win_loss_ratio), desc(avg_opponent_wins))
# Print the ranked list of fighters
print(ranked_fighters)
library(tidyverse)
best_grappler_data <- ufc_stats %>%
group_by(fighter) %>%
summarise(total_successful_takedowns = sum(takedown_successful),
total_attempts = sum(takedown_attempted))
best_grappler_data <- best_grappler_data %>%
mutate(takedown_rate = total_successful_takedowns / total_attempts)
# Plot the best grappler
ggplot(best_grappler_data, aes(x = reorder(fighter, -takedown_rate), y = takedown_rate)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Best Grappler (Takedown Rate)", x = "Fighter", y = "Takedown Rate") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Identifying Best Grappler (Top 50)
best_grappler_data <- ufc_stats %>%
group_by(fighter) %>%
summarise(total_successful_takedowns = sum(takedown_successful),
total_attempts = sum(takedown_attempted))
best_grappler_data <- best_grappler_data %>%
filter(total_attempts > 0) %>%
mutate(takedown_rate = total_successful_takedowns / total_attempts) %>%
top_n(50, wt = takedown_rate)
# Plot the Best Grappler (Top 50)
ggplot(best_grappler_data, aes(x = reorder(fighter, -takedown_rate), y = takedown_rate)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Best Grappler (Takedown Rate) - Top 50", x = "Fighter", y = "Takedown Rate") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Identifying Best Grappler (Top 50)
best_grappler_data <- ufc_stats %>%
group_by(fighter) %>%
summarise(total_successful_takedowns = sum(takedown_successful),
total_attempts = sum(takedown_attempted))
best_grappler_data <- best_grappler_data %>%
filter(total_attempts > 0) %>%
mutate(takedown_rate = total_successful_takedowns / total_attempts) %>%
top_n(20, wt = takedown_rate)
# Plot the Best Grappler (Top 50)
ggplot(best_grappler_data, aes(x = reorder(fighter, -takedown_rate), y = takedown_rate)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Best Grappler (Takedown Rate) - Top 50", x = "Fighter", y = "Takedown Rate") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
best_grappler_data <- ufc_stats %>%
group_by(fighter) %>%
summarise(total_successful_takedowns = sum(takedown_successful),
total_attempts = sum(takedown_attempted))
best_grappler_data <- best_grappler_data %>%
filter(total_attempts > 0) %>%
mutate(takedown_rate = total_successful_takedowns / total_attempts) %>%
top_n(20, wt = takedown_rate)
# Plot the Best Grappler (Top 20)
ggplot(best_grappler_data, aes(x = reorder(fighter, -takedown_rate), y = takedown_rate)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Best Grappler (Takedown Rate) - Top 20", x = "Fighter", y = "Takedown Rate") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Identifying Best Grappler
best_grappler_data <- ufc_stats %>%
group_by(fighter) %>%
summarise(grappling_efficiency = sum(takedown_successful) / sum(takedown_attempted)) %>%
arrange(desc(grappling_efficiency)) %>%
head()
# Top 20 Grapplers
top_20_grapplers <- best_grappler_data %>%
top_n(20, wt = grappling_efficiency)
# Plot the Best Grappler (Top 20)
ggplot(top_20_grapplers, aes(x = reorder(fighter, -grappling_efficiency), y = grappling_efficiency)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Best Grappler (Grappling Efficiency) - Top 20", x = "Fighter", y = "Grappling Efficiency") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Identifying Best Grapplers
best_grappler_data <- ufc_stats %>%
group_by(fighter) %>%
summarise(grappling_efficiency = sum(takedown_successful) / sum(takedown_attempted)) %>%
arrange(desc(grappling_efficiency)) %>%
head(20)  # Adjust the number to 20 for the top 20 grapplers
# Plot the Best Grappler (Top 20)
ggplot(best_grappler_data, aes(x = reorder(fighter, -grappling_efficiency), y = grappling_efficiency)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Best Grappler (Grappling Efficiency) - Top 20", x = "Fighter", y = "Grappling Efficiency") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Identifying Best Strikers
best_striker_data <- ufc_stats %>%
group_by(fighter) %>%
summarise(significant_strikes_rate = sum(significant_strikes_landed) / sum(significant_strikes_attempted)) %>%
arrange(desc(significant_strikes_rate)) %>%
head(20)  # Adjust the number to 20 for the top 20 strikers
# Plot the Best Striker (Top 20)
ggplot(best_striker_data, aes(x = reorder(fighter, -significant_strikes_rate), y = significant_strikes_rate)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Best Striker (Significant Strikes Rate) - Top 20", x = "Fighter", y = "Significant Strikes Rate") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(best_ppv_seller_per_fight)
# Identifying Best KOers
best_koer_data <- ufc_stats %>%
group_by(fighter) %>%
summarise(total_knockdowns = sum(knockdowns)) %>%
arrange(desc(total_knockdowns)) %>%
head(20)  # Adjust the number to 20 for the top 20 KOers
# Plot the Best KOer (Top 20)
ggplot(best_koer_data, aes(x = reorder(fighter, -total_knockdowns), y = total_knockdowns)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Best KOer (Total Knockdowns) - Top 20", x = "Fighter", y = "Total Knockdowns") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Calculating PPV Revenue per Fight
ufc_stats <- ufc_stats %>%
mutate(ppv_revenue_per_fight = (attendance * 59.99) / n())
# Identifying Best PPV Seller
best_ppv_seller_data <- ufc_stats %>%
group_by(fighter) %>%
summarise(avg_ppv_revenue_per_fight = mean(ppv_revenue_per_fight)) %>%
arrange(desc(avg_ppv_revenue_per_fight)) %>%
head(20)  # Adjust the number to 20 for the top 20 PPV sellers
# Plot the Best PPV Seller (Top 20)
ggplot(best_ppv_seller_data, aes(x = reorder(fighter, -avg_ppv_revenue_per_fight), y = avg_ppv_revenue_per_fight)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Best PPV Seller (Average Revenue per Fight) - Top 20", x = "Fighter", y = "Average PPV Revenue per Fight") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Identifying Best Entertainers
best_entertainer_data <- ufc_stats %>%
group_by(fighter) %>%
summarise(entertainment_metric = sum(significant_strikes_landed) + sum(takedown_successful)) %>%
arrange(desc(entertainment_metric)) %>%
head(20)  # Adjust the number to 20 for the top 20 entertainers
# Plot the Best Entertainer (Top 20)
ggplot(best_entertainer_data, aes(x = reorder(fighter, -entertainment_metric), y = entertainment_metric)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Best Entertainer (Composite Metric) - Top 20", x = "Fighter", y = "Composite Metric") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(ufc_stats)
# Identify Overall Best PPV Seller
best_ppv_seller_data <- ufc_stats %>%
group_by(fighter) %>%
summarise(total_ppv_revenue = sum(attendance * 59.99)) %>%
arrange(desc(total_ppv_revenue)) %>%
head(20)  # Adjust the number to 20 for the top 20 PPV sellers
# Plot the Best PPV Sellers (Top 20)
ggplot(best_ppv_seller_data, aes(x = reorder(fighter, -total_ppv_revenue), y = total_ppv_revenue)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Best PPV Seller (Total PPV Revenue) - Top 20", x = "Fighter", y = "Total PPV Revenue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
best_entertainer_data <- ufc_stats %>%
group_by(fighter) %>%
summarise(entertainment_metric = sum(significant_strikes_landed) + sum(takedown_successful) + sum(knockdowns)) %>%
arrange(desc(entertainment_metric)) %>%
head(20)  # Adjust the number to 20 for the top 20 entertainers
# Print the top entertainers
print(best_entertainer_data)
# Identifying GOAT
goat_data <- ufc_stats %>%
group_by(fighter) %>%
summarise(win_loss_ratio = sum(ifelse(winner == "W", 1, 0)) / sum(ifelse(winner == "W" | winner == "L", 1, 0))) %>%
filter(sum(ifelse(winner == "W" | winner == "L", 1, 0)) >= 10) %>%  # Filter for fighters with at least 10 matches
arrange(desc(win_loss_ratio)) %>%
head(20)  # Adjust the number to 20 for the top 20 GOATs
# Filter and Calculate GOAT Metrics
ufc_stats_filtered <- ufc_stats %>%
group_by(fighter) %>%
summarise(
total_wins = sum(winner == "W"),
total_losses = sum(winner == "L"),
total_fights = n_distinct(id)
) %>%
filter(total_fights >= 15)  # Adjust the minimum number of fights as needed
ufc_stats_filtered <- ufc_stats_filtered %>%
mutate(win_loss_ratio = total_wins / (total_wins + total_losses))
# Identify Top 20 GOAT
top_20_goat_filtered <- ufc_stats_filtered %>%
arrange(desc(win_loss_ratio), desc(total_wins)) %>%
head(20)
# Plot the Top 20 GOAT
ggplot(top_20_goat_filtered, aes(x = reorder(fighter, -win_loss_ratio), y = win_loss_ratio)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Top 20 GOAT (Based on Win-Loss Ratio and Total Wins)", x = "Fighter", y = "Win-Loss Ratio") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library("papaja")
r_refs("r-references.bib")
ufc_stats_filtered <- ufc_stats %>%
group_by(fighter) %>%
summarise(
total_wins = sum(winner == "W"),
total_losses = sum(winner == "L"),
total_fights = n_distinct(id)
) %>%
filter(total_fights >= 15)  # Adjust the minimum number of fights as needed
ufc_stats_filtered <- ufc_stats_filtered %>%
mutate(win_loss_ratio = total_wins / (total_wins + total_losses))
# Identify Top 20 GOAT
top_20_goat_filtered <- ufc_stats_filtered %>%
arrange(desc(win_loss_ratio), desc(total_wins)) %>%
head(20)
# Plot the Top 20 GOAT
ggplot(top_20_goat_filtered, aes(x = reorder(fighter, -win_loss_ratio), y = win_loss_ratio)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Top 20 GOAT (Based on Win-Loss Ratio and Total Wins)", x = "Fighter", y = "Win-Loss Ratio") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library("papaja")
library("tidyverse")
r_refs("r-references.bib")
# Filter and Calculate GOAT Metrics
ufc_stats_filtered <- ufc_stats %>%
group_by(fighter) %>%
summarise(
total_wins = sum(winner == "W"),
total_losses = sum(winner == "L"),
total_fights = n_distinct(id)
) %>%
filter(total_fights >= 15)  # Adjust the minimum number of fights as needed
ufc_stats_filtered <- ufc_stats_filtered %>%
mutate(win_loss_ratio = total_wins / (total_wins + total_losses))
# Identify Top 20 GOAT
top_20_goat_filtered <- ufc_stats_filtered %>%
arrange(desc(win_loss_ratio), desc(total_wins)) %>%
head(20)
# Plot the Top 20 GOAT
ggplot(top_20_goat_filtered, aes(x = reorder(fighter, -win_loss_ratio), y = win_loss_ratio)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Top 20 GOAT (Based on Win-Loss Ratio and Total Wins)", x = "Fighter", y = "Win-Loss Ratio") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
sessionInfo()
ggplot(top_20_goat_filtered, aes(x = reorder(fighter, -win_loss_ratio), y = win_loss_ratio)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Top 20 GOAT (Based on Win-Loss Ratio and Total Wins)", x = "Fighter", y = "Win-Loss Ratio") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Identifying Best KOers
best_koer_data <- ufc_stats %>%
group_by(fighter) %>%
summarise(total_knockdowns = sum(knockdowns)) %>%
arrange(desc(total_knockdowns)) %>%
head(20)  # Adjust the number to 20 for the top 20 KOers
# Print the data for the top 20 KOers
print(best_koer_data)
