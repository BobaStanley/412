theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Identifying Best Entertainers
best_entertainer_data <- ufc_stats %>%
group_by(fighter) %>%
summarise(entertainment_metric = sum(significant_strikes_landed) + sum(takedown_successful)) %>%
arrange(desc(entertainment_metric)) %>%
head(20)  # Adjust the number to 20 for the top 20 entertainers
# Plot the Best Entertainer (Top 20)
ggplot(best_entertainer_data, aes(x = reorder(fighter, -entertainment_metric), y = entertainment_metric)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Best Entertainer (Composite Metric) - Top 20", x = "Fighter", y = "Composite Metric") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(ufc_stats)
# Identify Overall Best PPV Seller
best_ppv_seller_data <- ufc_stats %>%
group_by(fighter) %>%
summarise(total_ppv_revenue = sum(attendance * 59.99)) %>%
arrange(desc(total_ppv_revenue)) %>%
head(20)  # Adjust the number to 20 for the top 20 PPV sellers
# Plot the Best PPV Sellers (Top 20)
ggplot(best_ppv_seller_data, aes(x = reorder(fighter, -total_ppv_revenue), y = total_ppv_revenue)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Best PPV Seller (Total PPV Revenue) - Top 20", x = "Fighter", y = "Total PPV Revenue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
best_entertainer_data <- ufc_stats %>%
group_by(fighter) %>%
summarise(entertainment_metric = sum(significant_strikes_landed) + sum(takedown_successful) + sum(knockdowns)) %>%
arrange(desc(entertainment_metric)) %>%
head(20)  # Adjust the number to 20 for the top 20 entertainers
# Print the top entertainers
print(best_entertainer_data)
# Identifying GOAT
goat_data <- ufc_stats %>%
group_by(fighter) %>%
summarise(win_loss_ratio = sum(ifelse(winner == "W", 1, 0)) / sum(ifelse(winner == "W" | winner == "L", 1, 0))) %>%
filter(sum(ifelse(winner == "W" | winner == "L", 1, 0)) >= 10) %>%  # Filter for fighters with at least 10 matches
arrange(desc(win_loss_ratio)) %>%
head(20)  # Adjust the number to 20 for the top 20 GOATs
# Filter and Calculate GOAT Metrics
ufc_stats_filtered <- ufc_stats %>%
group_by(fighter) %>%
summarise(
total_wins = sum(winner == "W"),
total_losses = sum(winner == "L"),
total_fights = n_distinct(id)
) %>%
filter(total_fights >= 15)  # Adjust the minimum number of fights as needed
ufc_stats_filtered <- ufc_stats_filtered %>%
mutate(win_loss_ratio = total_wins / (total_wins + total_losses))
# Identify Top 20 GOAT
top_20_goat_filtered <- ufc_stats_filtered %>%
arrange(desc(win_loss_ratio), desc(total_wins)) %>%
head(20)
# Plot the Top 20 GOAT
ggplot(top_20_goat_filtered, aes(x = reorder(fighter, -win_loss_ratio), y = win_loss_ratio)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Top 20 GOAT (Based on Win-Loss Ratio and Total Wins)", x = "Fighter", y = "Win-Loss Ratio") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library("papaja")
r_refs("r-references.bib")
ufc_stats_filtered <- ufc_stats %>%
group_by(fighter) %>%
summarise(
total_wins = sum(winner == "W"),
total_losses = sum(winner == "L"),
total_fights = n_distinct(id)
) %>%
filter(total_fights >= 15)  # Adjust the minimum number of fights as needed
ufc_stats_filtered <- ufc_stats_filtered %>%
mutate(win_loss_ratio = total_wins / (total_wins + total_losses))
# Identify Top 20 GOAT
top_20_goat_filtered <- ufc_stats_filtered %>%
arrange(desc(win_loss_ratio), desc(total_wins)) %>%
head(20)
# Plot the Top 20 GOAT
ggplot(top_20_goat_filtered, aes(x = reorder(fighter, -win_loss_ratio), y = win_loss_ratio)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Top 20 GOAT (Based on Win-Loss Ratio and Total Wins)", x = "Fighter", y = "Win-Loss Ratio") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library("papaja")
library("tidyverse")
r_refs("r-references.bib")
# Filter and Calculate GOAT Metrics
ufc_stats_filtered <- ufc_stats %>%
group_by(fighter) %>%
summarise(
total_wins = sum(winner == "W"),
total_losses = sum(winner == "L"),
total_fights = n_distinct(id)
) %>%
filter(total_fights >= 15)  # Adjust the minimum number of fights as needed
ufc_stats_filtered <- ufc_stats_filtered %>%
mutate(win_loss_ratio = total_wins / (total_wins + total_losses))
# Identify Top 20 GOAT
top_20_goat_filtered <- ufc_stats_filtered %>%
arrange(desc(win_loss_ratio), desc(total_wins)) %>%
head(20)
# Plot the Top 20 GOAT
ggplot(top_20_goat_filtered, aes(x = reorder(fighter, -win_loss_ratio), y = win_loss_ratio)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Top 20 GOAT (Based on Win-Loss Ratio and Total Wins)", x = "Fighter", y = "Win-Loss Ratio") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
sessionInfo()
ggplot(top_20_goat_filtered, aes(x = reorder(fighter, -win_loss_ratio), y = win_loss_ratio)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Top 20 GOAT (Based on Win-Loss Ratio and Total Wins)", x = "Fighter", y = "Win-Loss Ratio") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Identifying Best KOers
best_koer_data <- ufc_stats %>%
group_by(fighter) %>%
summarise(total_knockdowns = sum(knockdowns)) %>%
arrange(desc(total_knockdowns)) %>%
head(20)  # Adjust the number to 20 for the top 20 KOers
# Print the data for the top 20 KOers
print(best_koer_data)
library(tidyverse)
ufc_stats
# Calculate Striking Efficiency
striking_data <- ufc_stats %>%
group_by(fighter) %>%
summarise(striking_efficiency = sum(significant_strikes_landed) / sum(significant_strikes_attempted)) %>%
arrange(desc(striking_efficiency)) %>%
head(20)
# Calculate Grappling Efficiency
grappling_data <- ufc_stats %>%
group_by(fighter) %>%
summarise(grappling_efficiency = sum(takedown_successful) / sum(takedown_attempted)) %>%
arrange(desc(grappling_efficiency)) %>%
head(20)
# Combine Striking and Grappling Efficiency
combined_data <- striking_data %>%
inner_join(grappling_data, by = "fighter") %>%
mutate(combined_efficiency = striking_efficiency + grappling_efficiency) %>%
arrange(desc(combined_efficiency)) %>%
head(20)
View(combined_data)
# Create a bar plot for the combined efficiency
ggplot(combined_data, aes(x = reorder(fighter, -combined_efficiency), y = combined_efficiency)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Combined Efficiency - Top 20", x = "Fighter", y = "Combined Efficiency") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Calculate Striking Efficiency
striking_data <- ufc_stats %>%
group_by(fighter) %>%
summarise(striking_efficiency = sum(significant_strikes_landed) / sum(significant_strikes_attempted)) %>%
arrange(desc(striking_efficiency)) %>%
head(20)
# Calculate Grappling Efficiency
grappling_data <- ufc_stats %>%
group_by(fighter) %>%
summarise(grappling_efficiency = sum(takedown_successful) / sum(takedown_attempted)) %>%
arrange(desc(grappling_efficiency)) %>%
head(20)
# Combine Striking and Grappling Efficiency
combined_data <- striking_data %>%
inner_join(grappling_data, by = "fighter") %>%
mutate(combined_efficiency = striking_efficiency + grappling_efficiency) %>%
arrange(desc(combined_efficiency)) %>%
head(20)
View(combined_data)
ufc_stats %>%
group_by(fighter) %>%
summarise(grappling_efficiency = sum(takedown_successful) / sum(takedown_attempted)) %>%
arrange(desc(grappling_efficiency)) %>%
head()
ufc_stats %>%
group_by(fighter) %>%
summarise(striking_efficiency = sum(significant_strikes_landed) / sum(significant_strikes_attempted)) %>%
arrange(desc(striking_efficiency)) %>%
head()
# Calculate Striking Efficiency
striking_data <- ufc_stats %>%
group_by(fighter) %>%
summarise(striking_efficiency = sum(significant_strikes_landed) / sum(significant_strikes_attempted)) %>%
arrange(desc(striking_efficiency)) %>%
head(20)
# Calculate Grappling Efficiency
grappling_data <- ufc_stats %>%
group_by(fighter) %>%
summarise(grappling_efficiency = sum(takedown_successful) / sum(takedown_attempted)) %>%
arrange(desc(grappling_efficiency)) %>%
head(20)
# Combine Striking and Grappling Efficiency
combined_data <- striking_data %>%
inner_join(grappling_data, by = "fighter") %>%
mutate(combined_efficiency = striking_efficiency + grappling_efficiency) %>%
arrange(desc(combined_efficiency)) %>%
head(20)
ufc_stats %>%
group_by(fighter) %>%
summarise(
significant_strikes_landed = sum(significant_strikes_landed),
significant_strikes_attempted = sum(significant_strikes_attempted)
) %>%
arrange(desc(significant_strikes_landed / significant_strikes_attempted)) %>%
head(20)
ufc_stats %>%
group_by(fighter) %>%
summarise(
takedown_successful = sum(takedown_successful),
takedown_attempted = sum(takedown_attempted)
) %>%
arrange(desc(takedown_successful / takedown_attempted)) %>%
head(20)
combined_data <- striking_data %>%
inner_join(grappling_data, by = "fighter") %>%
mutate(combined_efficiency = striking_efficiency + grappling_efficiency) %>%
arrange(desc(combined_efficiency)) %>%
head(20)
print(combined_data)
# Combine Striking and Grappling Efficiency
combined_data <- striking_data %>%
full_join(grappling_data, by = "fighter") %>%
mutate(combined_efficiency = striking_efficiency + grappling_efficiency) %>%
arrange(desc(combined_efficiency)) %>%
head(20)
print(combined_data)
ufc_stats %>%
group_by(fighter) %>%
summarise(grappling_efficiency = sum(takedown_successful) / sum(takedown_attempted)) %>%
arrange(desc(grappling_efficiency)) %>%
head()
# Combine Striking and Grappling Efficiency
combined_data <- striking_data %>%
left_join(grappling_data, by = "fighter") %>%
mutate(combined_efficiency = striking_efficiency + coalesce(grappling_efficiency, 0)) %>%
arrange(desc(combined_efficiency)) %>%
head(20)
print(combined_data)
# Identifying Best Grapplers
best_grappler_data <- ufc_stats %>%
group_by(fighter) %>%
summarise(grappling_efficiency = sum(takedown_successful) / sum(takedown_attempted)) %>%
arrange(desc(grappling_efficiency)) %>%
head(20)  # Adjust the number to 20 for the top 20 grapplers
# Plot the Best Grappler (Top 20)
ggplot(best_grappler_data, aes(x = reorder(fighter, -grappling_efficiency), y = grappling_efficiency)) +
geom_plot(stat = "identity", position = "dodge", color = "black") +
labs(title = "Best Grappler (Grappling Efficiency) - Top 20", x = "Fighter", y = "Grappling Efficiency") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Identifying Best Grapplers
best_grappler_data <- ufc_stats %>%
group_by(fighter) %>%
summarise(grappling_efficiency = sum(takedown_successful) / sum(takedown_attempted)) %>%
arrange(desc(grappling_efficiency)) %>%
head(20)  # Adjust the number to 20 for the top 20 grapplers
# Plot the Best Grappler (Top 20)
ggplot(best_grappler_data, aes(x = reorder(fighter, -grappling_efficiency), y = grappling_efficiency)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Best Grappler (Grappling Efficiency) - Top 20", x = "Fighter", y = "Grappling Efficiency") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(ufc_stats)
View(ufc_stats)
library(tidyverse)
ufc_stats
ufc_stats %>%
group_by(fighter) %>%
summarise(striking_efficiency = sum(significant_strikes_landed) / sum(significant_strikes_attempted)) %>%
arrange(desc(striking_efficiency)) %>%
head()
ufc_stats %>%
group_by(fighter) %>%
summarise(grappling_efficiency = sum(takedown_successful) / sum(takedown_attempted)) %>%
arrange(desc(grappling_efficiency)) %>%
head()
View(combined_data)
View(grappling_data)
# Calculate Striking Efficiency
striking_data <- ufc_stats %>%
group_by(fighter) %>%
summarise(striking_efficiency = sum(significant_strikes_landed) / sum(significant_strikes_attempted)) %>%
arrange(desc(striking_efficiency)) %>%
head(20)
# Calculate Grappling Efficiency
grappling_data <- ufc_stats %>%
group_by(fighter) %>%
summarise(grappling_efficiency = sum(takedown_successful) / sum(takedown_attempted)) %>%
arrange(desc(grappling_efficiency)) %>%
head(20)
# Combine Striking and Grappling Efficiency
combined_data <- striking_data %>%
left_join(grappling_data, by = "fighter") %>%
mutate(combined_efficiency = striking_efficiency + coalesce(grappling_efficiency, 0)) %>%
arrange(desc(combined_efficiency)) %>%
head(20)
# Print the combined data
print(combined_data)
# Calculate Striking Efficiency
striking_data <- ufc_stats %>%
group_by(fighter) %>%
summarise(striking_efficiency = sum(significant_strikes_landed) / sum(significant_strikes_attempted)) %>%
arrange(desc(striking_efficiency)) %>%
head(20)
# Calculate Grappling Efficiency
grappling_data <- ufc_stats %>%
group_by(fighter) %>%
summarise(grappling_efficiency = sum(takedown_successful) / sum(takedown_attempted)) %>%
arrange(desc(grappling_efficiency)) %>%
head(20)
# Combine Striking and Grappling Efficiency
combined_data <- striking_data %>%
left_join(grappling_data, by = "fighter") %>%
mutate(combined_efficiency = coalesce(striking_efficiency, 0) + coalesce(grappling_efficiency, 0)) %>%
arrange(desc(combined_efficiency)) %>%
head(20)
# Print the combined data
print(combined_data)
# Best Striker in UFC
best_striker <- ufc_stats %>%
group_by(fighter) %>%
summarise(striking_efficiency = sum(significant_strikes_landed) / sum(significant_strikes_attempted)) %>%
arrange(desc(striking_efficiency)) %>%
head()
# Best Grappler in UFC
best_grappler <- ufc_stats %>%
group_by(fighter) %>%
summarise(grappling_efficiency = sum(takedown_successful) / sum(takedown_attempted)) %>%
arrange(desc(grappling_efficiency)) %>%
head()
# Combine Striking and Grappling Efficiency
combined_data <- best_striker %>%
left_join(best_grappler, by = "fighter") %>%
mutate(combined_efficiency = coalesce(striking_efficiency, 0) + coalesce(grappling_efficiency, 0))
# Print the combined data
print(combined_data)
View(combined_data)
ggplot(top_goat_striking_grappling, aes(x = reorder(fighter, -win_loss_ratio), y = win_loss_ratio)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Top GOAT (Striking and Grappling Efficiency) - Top 20", x = "Fighter", y = "Win-Loss Ratio") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(tidyverse)
library(tidyverse)
ufc_stats
library(tidyverse)
ufc_stats
View(goat_filtered)
View(combined_data)
View(ufc_stats)
View(ufc_stats_filtered)
ufc_stats %>% group_by(fighter) %>%
summarise(total_significant_strikes = sum(significant_strikes_landed)) %>%
arrange(-total_significant_strikes) %>%
head()
ufc_stats %>%
group_by(fighter) %>%
summarise(knockdown_rate = sum(knockdowns) / sum(significant_strikes_attempted)) %>%
arrange(desc(knockdown_rate)) %>%
head()
# Identifying Best KOers
best_koer_data <- ufc_stats %>%
group_by(fighter) %>%
summarise(total_knockdowns = sum(knockdowns)) %>%
arrange(desc(total_knockdowns)) %>%
head(20)  # Adjust the number to 20 for the top 20 KOers
# Print the data for the top 20 KOers
print(best_koer_data)
ufc_stats %>%
group_by(fighter) %>%
summarise(striking_efficiency = sum(significant_strikes_landed) / sum(significant_strikes_attempted)) %>%
arrange(desc(striking_efficiency)) %>%
head()
ufc_stats %>%
group_by(fighter) %>%
summarise(grappling_efficiency = sum(takedown_successful) / sum(takedown_attempted)) %>%
arrange(desc(grappling_efficiency)) %>%
head()
best_entertainer_data <- ufc_stats %>%
group_by(fighter) %>%
summarise(entertainment_metric = sum(significant_strikes_landed) + sum(takedown_successful) + sum(knockdowns)) %>%
arrange(desc(entertainment_metric)) %>%
head(20)  # Adjust the number to 20 for the top 20 entertainers
# Print the top entertainers
print(best_entertainer_data)
ufc_stats %>%
group_by(fighter) %>%
summarise(ppv_impact_score =
(knockdowns + significant_strikes_landed + takedown_successful + (1 - takedown_rate) * 10) / 4 +
sum(attendance) / 1000) %>%
arrange(desc(ppv_impact_score)) %>%
head()
ufc_stats <- ufc_stats %>%
mutate(ppv_revenue = attendance * 59.99)
best_ppv_seller <- ufc_stats %>%
group_by(fighter) %>%
summarise(total_ppv_revenue = sum(ppv_revenue)) %>%
arrange(desc(total_ppv_revenue)) %>%
head(1)
# Print the fighter with the highest total PPV revenue
print(best_ppv_seller)
ufc_stats_filtered <- ufc_stats %>%
group_by(fighter) %>%
summarise(
total_wins = sum(winner == "W"),
total_losses = sum(winner == "L"),
total_fights = n_distinct(id)
) %>%
filter(total_fights >= 15)  # Adjust the minimum number of fights as needed
ufc_stats_filtered <- ufc_stats_filtered %>%
mutate(win_loss_ratio = total_wins / (total_wins + total_losses))
goat_filtered <- ufc_stats_filtered %>%
arrange(desc(win_loss_ratio), desc(total_wins)) %>%
head(1)
# Print the fighter with the best overall record
print(goat_filtered)
# Identifying Best Grapplers
best_grappler_data <- ufc_stats %>%
group_by(fighter) %>%
summarise(grappling_efficiency = sum(takedown_successful) / sum(takedown_attempted)) %>%
arrange(desc(grappling_efficiency)) %>%
head(20)  # Adjust the number to 20 for the top 20 grapplers
# Plot the Best Grappler (Top 20)
ggplot(best_grappler_data, aes(x = reorder(fighter, -grappling_efficiency), y = grappling_efficiency)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Best Grappler (Grappling Efficiency) - Top 20", x = "Fighter", y = "Grappling Efficiency") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Filter and Calculate GOAT Metrics
ufc_stats_filtered <- ufc_stats %>%
group_by(fighter) %>%
summarise(
total_wins = sum(winner == "W"),
total_losses = sum(winner == "L"),
total_fights = n_distinct(id)
) %>%
filter(total_fights >= 15)  # Adjust the minimum number of fights as needed
ufc_stats_filtered <- ufc_stats_filtered %>%
mutate(win_loss_ratio = total_wins / (total_wins + total_losses))
# Identify Top 20 GOAT
top_20_goat_filtered <- ufc_stats_filtered %>%
arrange(desc(win_loss_ratio), desc(total_wins)) %>%
head(20)
# Plot the Top 20 GOAT as a bar graph
ggplot(top_20_goat_filtered, aes(x = reorder(fighter, -win_loss_ratio), y = win_loss_ratio)) +
geom_bar(stat = "identity", position = "dodge", color = "skyblue") +  # Adjust color as needed
labs(title = "Top 20 GOAT (Based on Win-Loss Ratio and Total Wins)", x = "Fighter", y = "Win-Loss Ratio") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Filter and Calculate GOAT Metrics
ufc_stats_filtered <- ufc_stats %>%
group_by(fighter) %>%
summarise(
total_wins = sum(winner == "W"),
total_losses = sum(winner == "L"),
total_fights = n_distinct(id)
) %>%
filter(total_fights >= 15)  # Adjust the minimum number of fights as needed
ufc_stats_filtered <- ufc_stats_filtered %>%
mutate(win_loss_ratio = total_wins / (total_wins + total_losses))
# Identify Top 20 GOAT
top_20_goat_filtered <- ufc_stats_filtered %>%
arrange(desc(win_loss_ratio), desc(total_wins)) %>%
head(20)
# Plot the Top 20 GOAT as a scatter plot
ggplot(top_20_goat_filtered, aes(x = total_wins, y = win_loss_ratio)) +
geom_point(color = "blue") +  # Adjust color as needed
labs(title = "Top 20 GOAT (Based on Win-Loss Ratio and Total Wins)", x = "Total Wins", y = "Win-Loss Ratio") +
theme_minimal()
# Filter and Calculate GOAT Metrics
ufc_stats_filtered <- ufc_stats %>%
group_by(fighter) %>%
summarise(
total_wins = sum(winner == "W"),
total_losses = sum(winner == "L"),
total_fights = n_distinct(id)
) %>%
filter(total_fights >= 15)  # Adjust the minimum number of fights as needed
ufc_stats_filtered <- ufc_stats_filtered %>%
mutate(win_loss_ratio = total_wins / (total_wins + total_losses))
# Identify Top 20 GOAT
top_20_goat_filtered <- ufc_stats_filtered %>%
arrange(desc(win_loss_ratio), desc(total_wins)) %>%
head(20)
# Plot the Top 20 GOAT as a scatter plot with names
ggplot(top_20_goat_filtered, aes(x = total_wins, y = win_loss_ratio, label = fighter)) +
geom_point(color = "blue") +  # Adjust color as needed
geom_text(vjust = -0.5, hjust = 0.5) +  # Adjust label position
labs(title = "Top 20 GOAT (Based on Win-Loss Ratio and Total Wins)", x = "Total Wins", y = "Win-Loss Ratio") +
theme_minimal()
library("papaja")
library("tidyverse")
r_refs("r-references.bib")
ufc_stats_filtered <- ufc_stats %>%
group_by(fighter) %>%
summarise(
total_wins = sum(winner == "W"),
total_losses = sum(winner == "L"),
total_fights = n_distinct(id)
) %>%
filter(total_fights >= 15)
ufc_stats_filtered <- ufc_stats_filtered %>%
mutate(win_loss_ratio = total_wins / (total_wins + total_losses))
# Identify Top 20 GOAT
top_20_goat_filtered <- ufc_stats_filtered %>%
arrange(desc(win_loss_ratio), desc(total_wins)) %>%
head(20)
# Plot the Top 20 GOAT as a scatter plot with names
ggplot(top_20_goat_filtered, aes(x = total_wins, y = win_loss_ratio, label = fighter)) +
geom_point(color = "blue") +
geom_text(vjust = -0.5, hjust = 0.5) +
labs(title = "Top 20 GOAT (Based on Win-Loss Ratio and Total Wins)", x = "Total Wins", y = "Win-Loss Ratio") +
theme_minimal()
